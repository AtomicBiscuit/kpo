version: '3.8'
services:
  postgres-orders:
    container_name: postgres-orders
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orders_user -d orders_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hw3-net

  postgres-payments:
    container_name: postgres-payments
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: payments_db
      POSTGRES_USER: payments_user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_payments_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U payments_user -d payments_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hw3-net


  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - hw3-net

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.3
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - zookeeper
    networks:
      - hw3-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092, localhost:9092, localhost:29092
    depends_on:
      - kafka
    networks:
      - hw3-net

  order-service:
    container_name: order-service
    build:
      context: ./orders
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      - postgres-orders
      - kafka
    networks:
      - hw3-net

  payments-service:
    container_name: payments-service
    build:
      context: ./payments
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      - postgres-payments
      - kafka
    networks:
      - hw3-net

  api-gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - order-service
      - payments-service
    networks:
      - hw3-net

networks:
  hw3-net:
    driver: bridge

volumes:
  postgres_orders_data:
  postgres_payments_data: